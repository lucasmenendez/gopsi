package client

import (
	"errors"
	"math/big"

	"github.com/lucasmenendez/psi/internal/encoder"
	"github.com/lucasmenendez/psi/internal/rsa"
	"github.com/lucasmenendez/psi/pkg/sra"
)

// Client struct contains all required parameters to perform a private set
// intersection over a knowed Server. It generates a RSA key pair to allow to
// Server to share a common prime number securely, stores it, and allow to
// encrypt the already encrypted Server records.
type Client struct {
	CommonPrime *big.Int
	sraKey      *sra.SRAKey
	Records     []*big.Int
	clientKeys  *rsa.RSAKey
}

// Init function instances a Client generating a new RSA key pair.
func Init() (client *Client, err error) {
	client = &Client{}

	// Generate RSA keys pair
	client.clientKeys, err = rsa.NewKey(1024)
	return
}

// PubKey function returns the current client instance RSA public key byte slice
// to be shared to the server. It allows to the server to encrypt the common
// prime number generated by it.
func (client *Client) PubKey() ([]byte, error) {
	return client.clientKeys.PubKey()
}

// AddCommonPrime function receives the common prime encrypted with the client
// public key, decrypts it with it private key and stores it into the current
// client instance to request the intersection. It also initializes the client
// SRA key with the received and decrypted common prime.
func (client *Client) AddCommonPrime(encryptedPrime []byte) (err error) {
	var encodedCommonPrime []byte
	encodedCommonPrime, err = client.clientKeys.Decrypt(encryptedPrime)
	if err != nil {
		return
	}

	var sCommonPrime string = string(encodedCommonPrime)
	client.CommonPrime, _ = new(big.Int).SetString(sCommonPrime, 16)

	client.sraKey, err = sra.NewKey(client.CommonPrime, 32)
	return
}

// LoadData function receives the records to request the intersection. It
// iterates over all items encondign each item to big.Int and encrypting it with
// SRA. Then stores the encrypted records into the current client instance.
func (client *Client) LoadData(data []string) error {
	if client.sraKey == nil {
		return errors.New("common prime not defined")
	}

	client.Records = make([]*big.Int, len(data))
	for i, item := range data {
		encoded := encoder.StrToInt(item)
		client.Records[i] = client.sraKey.Encrypt(encoded)
	}

	return nil
}

// EncryptInput functions allows to the client to re-encrypt the server data to
// share it with its own encrypted data to the server, allowing to it to perform
// the intersection.
func (client *Client) EncryptInput(input []*big.Int) (output []*big.Int, err error) {
	if client.sraKey == nil {
		return nil, errors.New("common prime not defined")
	}

	for _, item := range input {
		encrypted := client.sraKey.Encrypt(item)
		output = append(output, encrypted)
	}

	return
}
